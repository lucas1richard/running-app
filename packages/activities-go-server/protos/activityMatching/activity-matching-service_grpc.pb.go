// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: protos/activityMatching/activity-matching-service.proto

package activityMatching

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ActivityMatching_GetLongestCommonSubsequence_FullMethodName = "/activityMatching.ActivityMatching/GetLongestCommonSubsequence"
	ActivityMatching_GetCompactedRoute_FullMethodName           = "/activityMatching.ActivityMatching/GetCompactedRoute"
)

// ActivityMatchingClient is the client API for ActivityMatching service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityMatchingClient interface {
	GetLongestCommonSubsequence(ctx context.Context, in *LCSRequest, opts ...grpc.CallOption) (*LCSResponse, error)
	GetCompactedRoute(ctx context.Context, in *CompactedRouteRequest, opts ...grpc.CallOption) (*CompactedRouteResponse, error)
}

type activityMatchingClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityMatchingClient(cc grpc.ClientConnInterface) ActivityMatchingClient {
	return &activityMatchingClient{cc}
}

func (c *activityMatchingClient) GetLongestCommonSubsequence(ctx context.Context, in *LCSRequest, opts ...grpc.CallOption) (*LCSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LCSResponse)
	err := c.cc.Invoke(ctx, ActivityMatching_GetLongestCommonSubsequence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityMatchingClient) GetCompactedRoute(ctx context.Context, in *CompactedRouteRequest, opts ...grpc.CallOption) (*CompactedRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompactedRouteResponse)
	err := c.cc.Invoke(ctx, ActivityMatching_GetCompactedRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityMatchingServer is the server API for ActivityMatching service.
// All implementations must embed UnimplementedActivityMatchingServer
// for forward compatibility.
type ActivityMatchingServer interface {
	GetLongestCommonSubsequence(context.Context, *LCSRequest) (*LCSResponse, error)
	GetCompactedRoute(context.Context, *CompactedRouteRequest) (*CompactedRouteResponse, error)
	mustEmbedUnimplementedActivityMatchingServer()
}

// UnimplementedActivityMatchingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActivityMatchingServer struct{}

func (UnimplementedActivityMatchingServer) GetLongestCommonSubsequence(context.Context, *LCSRequest) (*LCSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLongestCommonSubsequence not implemented")
}
func (UnimplementedActivityMatchingServer) GetCompactedRoute(context.Context, *CompactedRouteRequest) (*CompactedRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompactedRoute not implemented")
}
func (UnimplementedActivityMatchingServer) mustEmbedUnimplementedActivityMatchingServer() {}
func (UnimplementedActivityMatchingServer) testEmbeddedByValue()                          {}

// UnsafeActivityMatchingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityMatchingServer will
// result in compilation errors.
type UnsafeActivityMatchingServer interface {
	mustEmbedUnimplementedActivityMatchingServer()
}

func RegisterActivityMatchingServer(s grpc.ServiceRegistrar, srv ActivityMatchingServer) {
	// If the following call pancis, it indicates UnimplementedActivityMatchingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ActivityMatching_ServiceDesc, srv)
}

func _ActivityMatching_GetLongestCommonSubsequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LCSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityMatchingServer).GetLongestCommonSubsequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityMatching_GetLongestCommonSubsequence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityMatchingServer).GetLongestCommonSubsequence(ctx, req.(*LCSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityMatching_GetCompactedRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompactedRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityMatchingServer).GetCompactedRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityMatching_GetCompactedRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityMatchingServer).GetCompactedRoute(ctx, req.(*CompactedRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityMatching_ServiceDesc is the grpc.ServiceDesc for ActivityMatching service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityMatching_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activityMatching.ActivityMatching",
	HandlerType: (*ActivityMatchingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLongestCommonSubsequence",
			Handler:    _ActivityMatching_GetLongestCommonSubsequence_Handler,
		},
		{
			MethodName: "GetCompactedRoute",
			Handler:    _ActivityMatching_GetCompactedRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/activityMatching/activity-matching-service.proto",
}
